package com.example;

/**
 * 首先这个例子十分特别， 莫名的就展示了 策略模式 这个设计模式。即使并没有提到它的好处以及适用场合
 */
interface WeatherState {
    public void showState();
}

class Weather {
    WeatherState state;

    public void show() {
        state.showState();
    }

    public void setState(WeatherState s) {
        state = s;
    }
}

public class Main {
    public static void main(String args[]) {
        Weather weatherBeijing = new Weather();
        System.out.print("\n 今天白天:");
        weatherBeijing.setState(new CloudyDayState());
        weatherBeijing.show();
        System.out.print("\n 今天夜间:");
        weatherBeijing.setState(new LightRainState());
        weatherBeijing.show();
        System.out.print("转:");
        weatherBeijing.setState(new HeavyRainState());
        weatherBeijing.show();
        System.out.print("\n 明天白天:");
        weatherBeijing.setState(new LightRainState());
        weatherBeijing.show();
        System.out.print("\n 明天夜间:");
        weatherBeijing.setState(new CloudyLittleState());
        weatherBeijing.show();
    }
}

class CloudyLittleState implements WeatherState {
    public void showState() {
        System.out.print("少云,有时晴.");
    }
}
class CloudyDayState implements WeatherState {
    public void showState() {
        System.out.print("多云啊.");
    }
}
class HeavyRainState implements WeatherState {
    public void showState() {
        System.out.print("大雨哦.");
    }
}
class LightRainState implements WeatherState {
    public void showState() {
        System.out.print("阳光十足.");
    }
}