# 第八章练习
***

#### 第一题
　　利用数据字典语法分析检查合法性和翻译为关系代数表达式，查询执行计划和查询优化器也就是变换为一个性能比较好的代数表达式，查询执行引擎操作硬件层面。

#### 第二题
　　主要包括执行一个查询所需的CPU计算时间、内存读写、并行或分布式系统中的通信开销、磁盘IO时间。一般而言以后两者为重要，前两者甚至可以忽略。
　　
#### 第三题
　　课本P265有详细介绍，有7个不同情况下使用的算法。包括如下：
　　1. A1线性搜索算法
　　2. A2二分搜索算法
　　3. A3主索引上等值比较算法
　　4. A4主索引的非码属性上的等值比较算法
　　5. A5辅助索引上的等值比较算法
　　6. A6主索引上的范围比较算法
　　7. A7辅助索引上的范围比较算法

#### 第四题
　　就是有多个属性共同构成的索引。一般利用类似字符串排序的方法对他们进行排序，就是属性前后的顺序会影响它的优先级。查询的话就按普通有序索引那样。
　　
#### 第五题
　　基本原理是遍历两个关系，就像嵌套循环两个for一样，具体实现有四种方法：
　　1. （块）嵌套循环连接算法
　　2. 索引嵌套连接算法
　　3. 归并连接算法
　　4. 散列连接算法

#### 第六题
>默认是前者当外表
###### 1
　　最坏情况：Nr*Bs+Br 即 20000*30+25=600025
　　最好情况：Br+Bs 即 25+30=55
###### 2
　　最坏情况：Br+Bs 即 25+30=55
###### 3
　　最坏情况：Br+Bs 即 25+30=55
###### 4
　　最坏情况：3*(Bs+Br)*Nr 即 3*(25+30)*Nr=165Nr
　　
#### 第七题
　　顺序执行每一个表达式操作，中前必然会生成一些临时关系表，生成这个临时关系的过程就叫做实体化。 如果每次都按顺序一步步执行代数表达式的每一个过程显然会造成巨大的空间浪费，所以就有了流水线的处理方式，立即处理中间结果过滤不必要的记录。

#### 第八题
　　因为对于同一条数据库查询有很多的方法去执行而且性能差异巨大。查询计划是按照一个代数表达式结合物理操作去执行查询的计划。输入是一个原始的关系代数表达式，输出一个优化过后性能比较高的等价表达式，同时在上面注释了每个步骤的物理操作方式。

#### 第九题
　　关系代数表达式的等价转换，得到一个性能较优的表达式。其中也包括连接运算的次序，这需要数据字典的帮助，即逻辑优化。还有物理优化，以不同的方式对表达式做注释并挑选出性能好的物理执行方案。

#### 第十题
　　就是两个关系代数表达式执行后得到的结果是一样的。等价规则有很多，在课本P281非常详细。

#### 第十一题
######  1
```
原始：a.studentNo,c.sorce,a.studentName (  
π ( b.courseNo=c.courseNo ^ c.studnetNo=a.student
^ b.courseName='数据结构' ^ c.score>=80
( Student a ? Course b ? Score c ) )
)

优化:
σ a.studentNo,c.sorce,a.studentName  (
(   π c.score>=80(Score c ) ?  π b.courseName='数据结构'(Course b)  )  ? σ studentNo,studentName(Studnet a)
)

```

######  2
略，这里打字太累了。

#### 第十二题
1. 尽早执行选择操作
2. 尽早执行投影操作

#### 第十三题
　　对于同一个代数表达式的优化结果会因为具体情况的不同而不同，所以需要数据字典了解基本情况， 例如有无索引？ 以何种方式组织记录数据等等。  各关系的大小、内部数据的分布、符合条件的结果集大小的估计、关系中索引的安排、文件是如何组织的…………

#### 第十四题
　　r2和r3的交集为E是r3的主码即一个r2元组最多对应一个r3元组，两者连接不超过r2的1500。r1和r2的交集为C只是r2的主码即一个r1元组最多对应一个r2元组，两者连接不超过r1的1000。也就是说三个关系的自然连接估计元组数目不超过1000个。应该先进行r2连接r3，然后在和r1连接，这样种间关系比较小。可以使用散列索引。

#### 第十五题
　　当r1、r2连接时N2*N1/V(C,r1)=1500*1000/900=1666个， 另一种估计N1*N2/(C,r2)=1000*1500/1100=1363个，取较小值1363个。然后和r3连接时N2*N3/V(E,r3)=1363*750/100=10222，或者N3*N2/V(E,r2)=750*1363/50=20445。取较小值因为可能有悬空的未参加连接的元组。 综上大概最后结果是不超过20445。策略是r1、r2、r3按顺序连接即可。  数量不大使用散列或者块嵌套连接应该都不错。

